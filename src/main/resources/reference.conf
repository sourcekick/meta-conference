# Default settings for the Viz Dashboard Service.

# Akka specific settings.
akka {
  loggers                          = [akka.event.slf4j.Slf4jLogger]
  logging-filter                   = "akka.event.slf4j.Slf4jLoggingFilter"
  loglevel                         = info
  log-dead-letters                 = 5
  log-dead-letters-during-shutdown = on
  logger-startup-timeout           = 30s

  actor {
    # SECURITY BEST-PRACTICE is to disable java serialization for its multiple
    # known attack surfaces.
    #
    # This setting is a short-cut to
    # - using DisabledJavaSerializer instead of JavaSerializer
    # - enable-additional-serialization-bindings = on
    #
    # Completely disable the use of `akka.serialization.JavaSerialization` by the
    # Akka Serialization extension, instead DisabledJavaSerializer will
    # be inserted which will fail explicitly if attempts to use java serialization are made.
    #
    # The log messages emitted by such serializer SHOULD be be treated as potential
    # attacks which the serializer prevented, as they MAY indicate an external operator
    # attempting to send malicious messages intending to use java serialization as attack vector.
    # The attempts are logged with the SECURITY marker.
    #
    # Please note that this option does not stop you from manually invoking java serialization
    #
    # The default value for this might be changed to off in future versions of Akka.
    allow-java-serialization = off

    debug {
      lifecycle = off
      receive   = off
      unhandled = on
    }
  }

  http {
    client {
      # The default value of the `User-Agent` header to produce if no
      # explicit `User-Agent`-header was included in a request.
      # If this value is the empty string and no header was included in
      # the request, no `User-Agent` header will be rendered at all.
      user-agent-header = "viz-dashboard"
      user-agent-header = ${?viz.dashboard.user-agent-header}
    }
  }
}

# Settings that are specific to the viz dashboard service.
meta-conference {
  # Settings for the REST api server.
  api {
    # Listening address
    address = 0.0.0.0
    address = ${?meta.conference.api.address}
    # Listening port
    port = 20022
    port = ${?meta.conference.api.port}
    # The dispatcher that will be used for the routing operations.
    # See the official documentation at http://doc.akka.io/docs/akka/current/scala/dispatchers.html for details.
    routing-dispatcher {
      type = "Dispatcher"
      executor = "fork-join-executor"
      fork-join-executor {
        parallelism-min = 8
        parallelism-factor = 3.0
        parallelism-max = 64
        task-peeking-mode = "FIFO"
      }
    }
  }

  # The database configuration, please see the official Slick documentation for details http://slick.lightbend.com/.
  database {
    //    profile = "slick.jdbc.PostgresProfile$"
    profile = "net.sourcekick.service.meta.conference.CustomPostgresDriver$"
    db {
      dataSourceClass = "slick.jdbc.DatabaseUrlDataSource"
      properties = {
        driver = "org.postgresql.Driver"
        url = ${?DATABASE_URL}
      }
      numThreads = 10
    }
  }

}
